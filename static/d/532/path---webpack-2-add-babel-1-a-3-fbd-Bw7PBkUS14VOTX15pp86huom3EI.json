{"data":{"site":{"siteMetadata":{"title":"hoilzz","author":"hoilzz","siteUrl":"","comment":{"disqusShortName":"","utterances":"hoilzz/hoilzz-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8dd83bbc-2c87-56b3-aa6b-5c83effe6c0e","excerpt":"코드를 보려면  이동 babel은 JS Compiler다. 바벨은 ES6+ code를 ES5로 변경해준다. 그래서 하위 브라우저(IE..)에 대응할 수 있다. 바벨  getting started  제안하는 package를 먼저 설치하자. core : transpile시 이용되는 코어 모듈 preset-env : 최신 JS를 이용할 수 있도록 해주는 smart preset. 얘 이용하면 어떤 syntax가 타겟 환경에 맞춰서 transpile되어야 하는지 micromanage…","html":"<blockquote>\n<p>코드를 보려면 <a href=\"https://github.com/hoilzz/create-react-packzz/tree/2-add-babel\">이동</a></p>\n</blockquote>\n<p>babel은 JS Compiler다.</p>\n<p>바벨은 ES6+ code를 ES5로 변경해준다. 그래서 하위 브라우저(IE..)에 대응할 수 있다.</p>\n<p>바벨 <a href=\"https://babeljs.io/docs/en/usage\">getting started</a> 제안하는 package를 먼저 설치하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -D @babel/core @babel/preset-env babel-loader\nnpm install @babel/polyfill</code></pre></div>\n<ul>\n<li>\n<p>core : transpile시 이용되는 코어 모듈</p>\n</li>\n<li>\n<p>preset-env : 최신 JS를 이용할 수 있도록 해주는 smart preset. 얘 이용하면 어떤 syntax가 타겟 환경에 맞춰서 transpile되어야 하는지 micromanage가 필요하지 않음. 그냥 얘 사용하면 편안-하고 bundle도 더 작아짐. (자세히 알고싶으면 <a href=\"https://babeljs.io/docs/en/babel-preset-env\">링크</a>)</p>\n<ul>\n<li>babel 설정할 때 또 추가 설명할거임</li>\n</ul>\n</li>\n<li>\n<p>polyfill : ES6+ 환경을 제공한다. 그리고 library/tool 보다는 실제 서비스코드에서 사용된다.</p>\n<ul>\n<li>new built-in인 Promise, WeakMap 등을 사용할 수 있도록, polyfill은 global scope 혹은 native Prototypes에 추가할 것이다.</li>\n</ul>\n</li>\n</ul>\n<p>그래서 transpile에 사용되는 패키지들은 devDependency로, 서비스 코드에 포함되어야 하는 polyfill은 dependency로 설치한다.</p>\n<h2 id=\"webpack에-babel-설정-추가하기\"><a href=\"#webpack%EC%97%90-babel-%EC%84%A4%EC%A0%95-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack에 babel 설정 추가하기.</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D babel-loader</code></pre></div>\n<p>loader를 자세히 알고싶다면.. <a href=\"https://github.com/hoilzz/TIL/blob/master/FrontEnd/webpack/%EA%B3%B5%ED%99%88%EB%B2%88%EC%97%AD/loader.md\">링크</a></p>\n<p>loader는 걍 전처리기임.</p>\n<p>일단,</p>\n<p>build 결과물을 편하게 보기 위해 math파일을 추가하자.\n그리고 이 파일을 index.js에서 import 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// math.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subtract</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add<span class=\"token punctuation\">,</span> subtract <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./math'</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5 + 3 : '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5 = 3 : '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js에 module 추가.</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n      exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n      include<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>module 옵션\n번들링 처리할 떄, 웹팩 자체만으로 처리할 수 없는 확장자나 JS지만 ESNext로 작성된 모듈들을 module 옵션으로 처리할 수 있다. 이 떄 module 옵션은 loader를 사용한다.</p>\n</blockquote>\n<ul>\n<li>test : regex를 통해 load할 파일 지정.</li>\n<li>exclude : 바벨 로더는 느림. 가능한 적은 양의 파일만 transforming 해야함. transforming할 필요가 없는 node_modules를 제외.</li>\n<li>\n<p>use : 사용할 모듈 및 모듈에 대한 옵션 작성.</p>\n<ul>\n<li>요 설정이 너무 길어질거 같으면 babel.config.js 파일을 따로 생성하여 관리.</li>\n</ul>\n</li>\n<li>include : 로더 모듈이 실제로 필요한 얘들만 transform 하도록 할 수 있다. (<strong>필요한 최소 모듈만 로더에 적용하면 빌드 퍼포먼스가 개선되기 때문에 다른 loader 이용시에도 필수로 사용하자.</strong>)</li>\n</ul>\n<blockquote>\n<p>babel-loader가 느리기 때문에 더 빠르게 하려면\ncacheDirectory 옵션을 이용하자.</p>\n<ul>\n<li>얘는 filesystem에 transformation(loader의 결과물)을 캐싱하여 2x정도 더 빠르게 할 수 있다.</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 프로젝트 루트 폴더에 babel.config.js 생성</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'@babel/env'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        modules<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        useBuiltIns<span class=\"token punctuation\">:</span> <span class=\"token string\">'usage'</span><span class=\"token punctuation\">,</span>\n        targets<span class=\"token punctuation\">:</span> <span class=\"token string\">'> 0.25%, not dead'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// plugins: []</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>babel은 크게 preset과 plugin으로 나뉜다.\npreset은 바벨 플러그인의 배열처럼 행동하는데, 플러그인들을 모아놓은 거라고 생각하면 된다.</p>\n<blockquote>\n<p>preset은 @babel/preset-stage-X X는 0~4까지 있음. stage들이 각각의 플러그인 모음집.\nplugin은 바벨이 컴파일시 transformation에 이용된다.\n예를 들어 @babel/plugin-transform-arrow-functions 얘는 ES6 화살표 함수에 대해 위 플러그인을 이용하여 transformation을 진행.</p>\n</blockquote>\n<p>요약하면 어떤 plugin쓸지 모를 때 plugin 모음집 preset 사용하면됨. 그러다가 preset이 transformation 하지 못하는 특정 ES6+ syntax를 사용할 경우, 그 특정 플러그인만 추가해주면됨.</p>\n<p>여튼 우리는 rough한 설정을 할꺼니까 preset만 설정해주면된다.\n@babel/preset-env 설정에 대해 알아보자.</p>\n<ul>\n<li>\n<p>targets : <a href=\"https://github.com/browserslist/browserslist\">browserlist</a>와 같이 target browser 설정할 수 있음.</p>\n<ul>\n<li>걍 바벨 공홈에서 써진걸로 설정.</li>\n</ul>\n</li>\n<li>\n<p>modules : ES6 모듈 문법을 다른 모듈타입으로 변경하는건데, false로 한 이유는 import/export 문을 그대로 사용하기 위함.</p>\n<ul>\n<li>왜냐하면 webpack의 treeshaking은 import/export로 이뤄져야하기 때문(자세한건 <a href=\"https://medium.com/naver-fe-platform/webpack%EC%97%90%EC%84%9C-tree-shaking-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-1748e0e0c365\">이 글</a> 읽으면 될듯)</li>\n</ul>\n</li>\n<li>\n<p>useBuiltIns</p>\n<ul>\n<li>바벨7이 되기 전에 babel/polyfill을 웹팩 엔트리에 별개로 추가하여 import 했었음.</li>\n<li>근데 이렇게 하면 사용하지 않는(불필요한) polyfill도 import하는 문제 발생.</li>\n<li>그래서 usage라는 설정이 추가됨.</li>\n<li>말 그대로 각 파일에서 사용되는 polyfill만 import함.</li>\n<li>근데 해당 브라우저에서 지원하는 syntax일 경우 import 하지 않음. 즉, 조건 하나를 더 추가(브라우저에서 지원하지 않을 경우) 하여 import</li>\n<li>예제를 보고 싶거나 자세히 알고 싶으면 <a href=\"https://babeljs.io/docs/en/babel-preset-env#usebuiltins\">링크</a> 이동</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"summary\"><a href=\"#summary\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<ul>\n<li>\n<p>바벨은 하위 브라우저에 대응하기 위한 JS Compiler다.</p>\n<ul>\n<li>ES6+ code를 ES5로 변경해준다.</li>\n<li>이 때 변경 규칙은, preset, plugin이 존재하면 이것을 따른다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[나만의 웹팩 만들기] 2. babel 추가하기","date":"February 03, 2019"}}},"pageContext":{"slug":"/webpack/2-add-babel/","previous":{"fields":{"slug":"/webpack/1-basic-build/"},"frontmatter":{"title":"[나만의 웹팩 만들기] 1. basic build","category":"webpack"}},"next":{"fields":{"slug":"/webpack/3-output/"},"frontmatter":{"title":"[나만의 웹팩 만들기] 3. output","category":"webpack"}}}}