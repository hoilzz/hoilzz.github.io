{"data":{"site":{"siteMetadata":{"title":"hoilzz","author":"hoilzz","siteUrl":"https://hoilzz.github.io","comment":{"disqusShortName":"","utterances":"hoilzz/hoilzz-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"449a504c-5f0b-5855-8634-4f14fb85f3fc","excerpt":"리액트에서 클래스 컴포넌트를 사용하다가 arrow function과 메서드 차이가 궁금해져서 찾아본 포스팅이다. Class Properties Proposal 덕분에 코드가 간단해졌는데, 특히 내부  나  와  를 static으로 작성할 때 코드 작성이 간단해졌다. !img 게다가 클래스 프로퍼티 이니셜라이저는 생성자 함수에서 bind 함수 호출하는 것 대신에, React에서 바인딩을 처리하기 위해 지난…","html":"<p>리액트에서 클래스 컴포넌트를 사용하다가 arrow function과 메서드 차이가 궁금해져서 찾아본 포스팅이다.</p>\n<p><a href=\"https://github.com/tc39/proposal-class-fields\">Class Properties Proposal</a>덕분에 코드가 간단해졌는데, 특히 내부 <code class=\"language-text\">state</code>나 <code class=\"language-text\">propTypes</code>와 <code class=\"language-text\">defaultProps</code>를 static으로 작성할 때 코드 작성이 간단해졌다.</p>\n<p><a href=\"https://cdn-images-1.medium.com/max/1600/1*5d3V8cnz05YCsxDBBvz8Rw.png\">!img</a></p>\n<p>게다가 클래스 프로퍼티 이니셜라이저는 생성자 함수에서 bind 함수 호출하는 것 대신에, React에서 바인딩을 처리하기 위해 지난 6개월 동안 더 유행된 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ComponentA</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>클래스 프로퍼티에서 화살표 함수 사용하기</em></p>\n<p>클래스 프로퍼티에서 화살표 함수는 유용하다. 왜냐하면 autobind되고 생성자 함수에서 다음 코드를 작성할 필요가 없다. <code class=\"language-text\">this.handleClick = this.handleClcik.bind(this)</code></p>\n<p>하지만 정말로 클래스 프로퍼티에 화살표 함수를 작성해야만 할까?</p>\n<p>먼저, 클래스 프로퍼티 아래에 뭐가 있는지 살펴보자.</p>\n<h2 id=\"what-class-properties-look-like-once-transpiled-to-es2017\"><a href=\"#what-class-properties-look-like-once-transpiled-to-es2017\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What Class Properties look like once transpiled to ES2017</h2>\n<p>static/instance property, arrow function, usual function 을 가진 간단한 클래스를 코드로 작성하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n  counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleLongClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://babeljs.io/repl/\">Babel REPL</a>로 가서 es2017과 stage-2 프리셋으로 트랜스파일된 클래스를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 약식 version</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleLongClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span></code></pre></div>\n<p>인스턴스 프로퍼티는 생성자 함수 내부로 이동하고 static은 class 선언문 뒤로 이동되었다.</p>\n<p>개인적으로, static keyword 추가를 좋아한다. 왜냐하면 static properties와 함께 클래스를 직접 <code class=\"language-text\">export</code> 할 수 있기 때문이다.</p>\n<p>인스턴스 프로퍼티도 좋아하는데, 왜냐하면 코드에서 생성자 함수가 커지지 않기 때문이다.</p>\n<p>프로퍼티에서 화살표 함수의 경우, <code class=\"language-text\">handleClick</code>이 생성자 함수로 이동되었다. (<strong>instance</strong> property 처럼)</p>\n<p>usual function method인 <code class=\"language-text\">handleLongClick</code>은 변한게 없다.</p>\n<p>프로퍼티 이니셜라이저는 유용하지만 클래스 프로퍼티로 arrow function 사용시, binding 하는 방식이 hackish하다.</p>\n<h3 id=\"mockability\"><a href=\"#mockability\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mockability</h3>\n<p>class method를 모킹하거나 추적?(spy)하기를 원할 때, 프로토타입을 사용하는 것이다. (왜냐하면 가장 쉬운 방법은 프로토타입 체이닝을 통해 object prototype 객체의 모든 변경사항을 볼 수 있으므로)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span>\n  counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleLongClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">A.prototype.handleLongCLick</code>은 정의되었다.</p>\n<p><code class=\"language-text\">A.prototype.handleClick</code>은 undefined다.</p>\n<p><strong>class property에서 arrow function을 사용했기 때문에, <code class=\"language-text\">handleClick</code>은 생성자 이니셜라이징 될 때만 정의되고 prototype 내부에 없다.</strong></p>\n<p>그래서, 이니셜라이징된 오브젝트에서 함수를 모킹 해보면 프로토타입 체이닝을 통해 볼 수 없다면</p>\n<h2 id=\"inheritance\"><a href=\"#inheritance\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inheritance</h2>\n<p>base class A를 정의하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A.handleClick'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleLongClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A.handleLongClick'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {constructor: ƒ, handleLongClick: ƒ}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// A.handleClick</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLongClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// A.handleLongClick</span></code></pre></div>\n<p>만약 class B가 A를 상속받으면, handleClick은 프로토타입에 없고 super.handleClick을 호출 할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B.handleClick'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleLongClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLongClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B.handleLongClick'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// A {constructor: ƒ, handleLongClick: ƒ}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {constructor: ƒ, handleLongClick: ƒ}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Uncaught TypeError: (intermediate value).handleClick is not a function</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLongClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// A.handleLongClick</span>\n<span class=\"token comment\">// B.handleLongClick</span></code></pre></div>\n<p>만약 A클래스의 상속을 받은 C클래스가 <code class=\"language-text\">handleClick</code>을 arrow function 대신 usual function으로 구현한다면, <code class=\"language-text\">handleClick</code>은 <code class=\"language-text\">super.handleClick()</code>만 실행한다. 이상하지 않니..?</p>\n<p>부모 클래스의 생성자 내부에서 <code class=\"language-text\">handleCLick</code>의 이니셜라이징이 그것을 오버라이드 하기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C.handleClick'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">C</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// A {constructor: ƒ, handleClick: ƒ}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">C</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {constructor: ƒ, handleLongClick: ƒ}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// A.handleClick</span></code></pre></div>\n<h2 id=\"performance\"><a href=\"#performance\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance</h2>","frontmatter":{"title":"[번역] 클래스 프로퍼티로 화살표 함수 사용하는 것은 생각만큼 좋지않다","date":"April 13, 2019"}}},"pageContext":{"slug":"/javascript/arrow-functions-in-class-properties/","previous":{"fields":{"slug":"/react/connect-state/"},"frontmatter":{"title":"connect의 mapStateToProps는 언제 실행될까. 그리고 리렌더링은 언제 어떻게 발생하는가.","category":"react"}},"next":{"fields":{"slug":"/etc/wrong-abstraction/"},"frontmatter":{"title":"[번역] 잘못된 추상화","category":"etc"}}}}