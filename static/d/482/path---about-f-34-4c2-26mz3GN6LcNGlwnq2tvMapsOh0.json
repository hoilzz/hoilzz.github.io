{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"9d128ab7-1b79-5684-a6a6-7f5b50395b6e","excerpt":"Your name hoilzz","html":"<h1 id=\"your-name\"><a href=\"#your-name\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Your name</h1>\n<div align=\"center\">\n<p><em>hoilzz</em></p>\n</div>","frontmatter":{"title":"about","date":"January 27, 2019","lang":"en"}}},{"node":{"id":"8dd83bbc-2c87-56b3-aa6b-5c83effe6c0e","excerpt":"2. add babel babel은 JS Compiler다. 바벨은 ES6+ code를 ES5로 변경해준다. 그래서 하위 브라우저(IE..)에 대응할 수 있다. 바벨  getting started  제안하는 package를 먼저 설치하자. core : transpile…","html":"<h1 id=\"2-add-babel\"><a href=\"#2-add-babel\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. add babel</h1>\n<p>babel은 JS Compiler다.</p>\n<p>바벨은 ES6+ code를 ES5로 변경해준다. 그래서 하위 브라우저(IE..)에 대응할 수 있다.</p>\n<p>바벨 <a href=\"https://babeljs.io/docs/en/usage\">getting started</a> 제안하는 package를 먼저 설치하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -D @babel/core @babel/preset-env babel-loader\nnpm install @babel/polyfill</code></pre></div>\n<ul>\n<li>\n<p>core : transpile시 이용되는 코어 모듈</p>\n</li>\n<li>\n<p>preset-env : 최신 JS를 이용할 수 있도록 해주는 smart preset. 얘 이용하면 어떤 syntax가 타겟 환경에 맞춰서 transpile되어야 하는지 micromanage가 필요하지 않음. 그냥 얘 사용하면 편안-하고 bundle도 더 작아짐. (자세히 알고싶으면 <a href=\"https://babeljs.io/docs/en/babel-preset-env\">링크</a>)</p>\n<ul>\n<li>babel 설정할 때 또 추가 설명할거임</li>\n</ul>\n</li>\n<li>\n<p>polyfill : ES6+ 환경을 제공한다. 그리고 library/tool 보다는 실제 서비스코드에서 사용된다.</p>\n<ul>\n<li>new built-in인 Promise, WeakMap 등을 사용할 수 있도록, polyfill은 global scope 혹은 native Prototypes에 추가할 것이다.</li>\n</ul>\n</li>\n</ul>\n<p>그래서 transpile에 사용되는 패키지들은 devDependency로, 서비스 코드에 포함되어야 하는 polyfill은 dependency로 설치한다.</p>\n<h2 id=\"webpack에-babel-설정-추가하기\"><a href=\"#webpack%EC%97%90-babel-%EC%84%A4%EC%A0%95-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack에 babel 설정 추가하기.</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D babel-loader</code></pre></div>\n<p>loader를 자세히 알고싶다면.. <a href=\"https://github.com/hoilzz/TIL/blob/master/FrontEnd/webpack/%EA%B3%B5%ED%99%88%EB%B2%88%EC%97%AD/loader.md\">링크</a></p>\n<p>loader는 걍 전처리기임.</p>\n<p>일단,</p>\n<p>build 결과물을 편하게 보기 위해 math파일을 추가하자.\n그리고 이 파일을 index.js에서 import 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// math.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subtract</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add<span class=\"token punctuation\">,</span> subtract <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./math\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 + 3 : \"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 = 3 : \"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js에 module 추가.</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n      exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n      include<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>module 옵션\n번들링 처리할 떄, 웹팩 자체만으로 처리할 수 없는 확장자나 JS지만 ESNext로 작성된 모듈들을 module 옵션으로 처리할 수 있다. 이 떄 module 옵션은 loader를 사용한다.</p>\n</blockquote>\n<ul>\n<li>test : regex를 통해 load할 파일 지정.</li>\n<li>exclude : 바벨 로더는 느림. 가능한 적은 양의 파일만 transforming 해야함. transforming할 필요가 없는 node_modules를 제외.</li>\n<li>\n<p>use : 사용할 모듈 및 모듈에 대한 옵션 작성.</p>\n<ul>\n<li>요 설정이 너무 길어질거 같으면 babel.config.js 파일을 따로 생성하여 관리.</li>\n</ul>\n</li>\n<li>include : 로더 모듈이 실제로 필요한 얘들만 transform 하도록 할 수 있다. (<strong>필요한 최소 모듈만 로더에 적용하면 빌드 퍼포먼스가 개선되기 때문에 다른 loader 이용시에도 필수로 사용하자.</strong>)</li>\n</ul>\n<blockquote>\n<p>babel-loader가 느리기 때문에 더 빠르게 하려면\ncacheDirectory 옵션을 이용하자. </p>\n<ul>\n<li>얘는 filesystem에 transformation(loader의 결과물)을 캐싱하여 2x정도 더 빠르게 할 수 있다.</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 프로젝트 루트 폴더에 babel.config.js 생성</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/env\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        modules<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        useBuiltIns<span class=\"token punctuation\">:</span> <span class=\"token string\">\"usage\"</span><span class=\"token punctuation\">,</span>\n        targets<span class=\"token punctuation\">:</span> <span class=\"token string\">\"> 0.25%, not dead\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// plugins: []</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>babel은 크게 preset과 plugin으로 나뉜다.\npreset은 바벨 플러그인의 배열처럼 행동하는데, 플러그인들을 모아놓은 거라고 생각하면 된다. </p>\n<blockquote>\n<p>preset은 @babel/preset-stage-X X는 0~4까지 있음. stage들이 각각의 플러그인 모음집.\nplugin은 바벨이 컴파일시 transformation에 이용된다.\n예를 들어 @babel/plugin-transform-arrow-functions 얘는  ES6 화살표 함수에 대해 위 플러그인을 이용하여 transformation을 진행.</p>\n</blockquote>\n<p>요약하면 어떤 plugin쓸지 모를 때 plugin 모음집 preset 사용하면됨. 그러다가 preset이 transformation 하지 못하는 특정 ES6+ syntax를 사용할 경우, 그 특정 플러그인만 추가해주면됨.</p>\n<p>여튼 우리는 rough한 설정을 할꺼니까 preset만 설정해주면된다.\n@babel/preset-env 설정에 대해 알아보자.</p>\n<ul>\n<li>\n<p>targets : <a href=\"https://github.com/browserslist/browserslist\">browserlist</a>와 같이 target browser 설정할 수 있음. </p>\n<ul>\n<li>걍 바벨 공홈에서 써진걸로 설정. </li>\n</ul>\n</li>\n<li>\n<p>modules : ES6 모듈 문법을 다른 모듈타입으로 변경하는건데, false로 한 이유는 import/export 문을 그대로 사용하기 위함.</p>\n<ul>\n<li>왜냐하면 webpack의 treeshaking은 import/export로 이뤄져야하기 때문(자세한건 <a href=\"https://medium.com/naver-fe-platform/webpack%EC%97%90%EC%84%9C-tree-shaking-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-1748e0e0c365\">이 글</a> 읽으면 될듯)</li>\n</ul>\n</li>\n<li>\n<p>useBuiltIns</p>\n<ul>\n<li>바벨7이 되기 전에 babel/polyfill을 웹팩 엔트리에 별개로 추가하여 import 했었음.</li>\n<li>근데 이렇게 하면 사용하지 않는(불필요한) polyfill도 import하는 문제 발생.</li>\n<li>그래서 usage라는 설정이 추가됨.</li>\n<li>말 그대로 각 파일에서 사용되는 polyfill만 import함.</li>\n<li>근데 해당 브라우저에서 지원하는 syntax일 경우 import 하지 않음. 즉, 조건 하나를 더 추가(브라우저에서 지원하지 않을 경우) 하여 import</li>\n<li>예제를 보고 싶거나 자세히 알고 싶으면 <a href=\"https://babeljs.io/docs/en/babel-preset-env#usebuiltins\">링크</a> 이동</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"summary\"><a href=\"#summary\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<ul>\n<li>\n<p>바벨은 하위 브라우저에 대응하기 위한 JS Compiler다.</p>\n<ul>\n<li>ES6+ code를 ES5로 변경해준다.</li>\n<li>이 때 변경 규칙은, preset, plugin이 존재하면 이것을 따른다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"d2a0fa90-92c1-5447-aed0-5a4765dad710","excerpt":"3. output 만약에 서비스하는 앱이라면, 점점 커질 수 있다.  file 이름에 hash를 이용하여  static resource에 대해 캐싱할 수 있다. 일단, output 이름부터 지정해주자. (사실 안해줘도 되는데 나중에 entry…","html":"<h1 id=\"3-output\"><a href=\"#3-output\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. output</h1>\n<p>만약에 서비스하는 앱이라면, 점점 커질 수 있다. <a href=\"https://webpack.js.org/guides/caching/\">file 이름에 hash를 이용하여</a> static resource에 대해 캐싱할 수 있다.</p>\n<p>일단, output 이름부터 지정해주자. (사실 안해줘도 되는데 나중에 entry가 여러개가 될 경우를 대비해서 미리 세팅해주자.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">entry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">:</span> <span class=\"token string\">\"./src/index.js\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\noutput<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  filename<span class=\"token punctuation\">:</span> <span class=\"token string\">\"[name].bundle.js\"</span><span class=\"token punctuation\">,</span>\n  path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>특정 entry의 key를 app으로 변경하고, output의 <code class=\"language-text\">[name]</code>을 통해 빌드 결과물의 이름을 설정할 수 있다.</p>\n<p>npm run build로 빌드된 파일명이 app.bundle.js로 변경됐는지 확인하자.</p>\n<h2 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>html-webpack-plugin</h2>\n<p>앞에서 entry 포인트의 key값을 output의 filename으로 갖도록 변경해보았다. 근데 entry point 이름이 바뀔 때마다 index.html에서 참조하고 있는 js 파일이름을 바꿔줘야한다.</p>\n<p>htmlwebpackplugin을 통해 이 문제를 해결하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D html-webpack-plugin</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>htmlwebpackplugin은</p>\n<ul>\n<li>index.html을 자동 생성</li>\n<li>bundles 요청하는 script문을 변경된 파일이름으로 자동으로 추가</li>\n</ul>\n<p>npm run build하고, dist 폴더 내의 index.html을 열어보자.\nscript문이 자동으로 추가된 것을 확인할 수 있다.</p>\n<h2 id=\"dist-folder의-파일들-자동-삭제하기\"><a href=\"#dist-folder%EC%9D%98-%ED%8C%8C%EC%9D%BC%EB%93%A4-%EC%9E%90%EB%8F%99-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>/dist folder의 파일들 자동 삭제하기</h2>\n<p>현재 dist폴더 내부에 main.js, app.bundle.js 등이 혼재되어있다. 나중에 빌드 결과물에 대해 캐싱 기법을 적용하기 위해 파일명에 hash값을 사용할텐데, dist 폴더 안에 파일이 계속 추가될것이다.</p>\n<p>그래서 매번 빌드할 때마다 자동으로 dist 폴더를 삭제하는 플러그인 이용 할거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D clean-webpack-plugin</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"a1ca0b92-ba6f-583d-b11e-6cab2ec7ac66","excerpt":"4. 개발 환경 갖추기 얘는 production mode에서는 필요없는 설정이다. development mode에서만 필요하다. 일단 mode를 development로 설정하자. mode \n각 모드에 따라 최적화가 달라진다.\ndev…","html":"<h1 id=\"4-개발-환경-갖추기\"><a href=\"#4-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B0%96%EC%B6%94%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 개발 환경 갖추기</h1>\n<p>얘는 production mode에서는 필요없는 설정이다. development mode에서만 필요하다.</p>\n<p>일단 mode를 development로 설정하자.</p>\n<blockquote>\n<p><a href=\"https://webpack.js.org/concepts/mode/#mode-development\">mode</a>\n각 모드에 따라 최적화가 달라진다.\ndev는 개발의 생산성을 높이기 위한 설정. production은 생산성은 고려하지 않고 실제 서비스 될 때 필요한 최적화 설정이 포함됨.\n가장 큰 차이점은 bundle 빌드시 production에서 treeshaking이 가능하고 development는 불가능</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"source-map-이용하기\"><a href=\"#source-map-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>source map 이용하기.</h2>\n<p>코드가 번들링 됐을 때, 어떤 코드 라인에서 에러 발생했는지 추적하기 어렵다. </p>\n<p>그래서 JS에서 <a href=\"https://blog.teamtreehouse.com/introduction-source-maps\">source map</a>을 제공한다. 이것은 컴파일된 코드가 원래 소스코드에 매핑된다. 또한, <a href=\"https://webpack.js.org/configuration/devtool/\">다양한 옵션</a>을 가진다.</p>\n<p><a href=\"https://webpack.js.org/configuration/devtool/#development\">웹팩에서 권장하는 개발 환경에 적합한 옵션</a>에서 <code class=\"language-text\">cheap-module-eval-source-map</code>을 사용할거다. </p>\n<p>요거에 대한 장점과 테스트는 webpack-dev-server까지 설치하여 실습하며 알아보자.</p>\n<h2 id=\"webpack-dev-server-이용하기\"><a href=\"#webpack-dev-server-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack-dev-server 이용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D webpack-dev-server</code></pre></div>\n<p>webpack-dev-server는 간단한 web server를 제공하고 live reloading 기능을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    contentBase<span class=\"token punctuation\">:</span> <span class=\"token string\">'./dist'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  devtool<span class=\"token punctuation\">:</span> 'cheap<span class=\"token operator\">-</span>module<span class=\"token operator\">-</span>eval<span class=\"token operator\">-</span>source<span class=\"token operator\">-</span>map\"\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>contentBase는 웹팩 output.path와 동일해야한다. </p>\n<blockquote>\n<p>WDS(webpack-dev-server)는 compile 후에 output 파일을 작성하지 않는다. 대신에, web server 메모리에 bundle 파일을 저장하고 그것을 제공한다. 만약 페이지가 bundle file을 다른 path에서 찾아야한다면, <code class=\"language-text\">publicPath</code> 옵션을 이용하여 경로를 설정해줘야한다.</p>\n</blockquote>\n<p>npm 명령어에 데브서버 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;scripts&quot;: {\n  &quot;start&quot;: &quot;webpack-dev-server&quot;\n}</code></pre></div>\n<p>이제 일부러 error를 내보자. (아무거나 해보자.)</p>\n<p>콘솔 창을 보면 오류난 코드의 라인을으로 매핑되는 것을 확인할 수 있다.</p>\n<p>cheap-module-eval-source-map의 기능을 볼 수 있는데,</p>\n<ul>\n<li>cheap이 붙는 이유는 column mapping은 되지 않기 때문이다</li>\n<li>대신, line number로 매핑된다.</li>\n<li>eval이 붙은 이유는 각 모듈은 <code class=\"language-text\">eval()</code>로 실행되기 때문이다.</li>\n</ul>\n<h2 id=\"hot-moudle-replacement\"><a href=\"#hot-moudle-replacement\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>hot moudle replacement</h2>\n<p>현재 webpack-dev-server는 코드 수정 후 저장하게 되면 전체 페이지를 reload 한다.</p>\n<p>HMR은 웹팩에서 제공하는 가장 유용한 것 중 하나임. 전체 페이지 새로고침 없이 runtime 중에 업데이트되는 모듈이다. (요번 모듈은 production에서 사용하지 않을거임)</p>\n<p>webpack-dev-server와 webpack 내장 기능인 HMR plugin을 이용할거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>l\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    hot<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// index.js</span>\n\n<span class=\"token comment\">//...</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./math.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에 있던 subtract 함수를 module.hot.accept의 2번째 함수로 옮기자.</p>\n<p>그리고 subtract 함수의 연산식을 *,/ 로 바꿔가며 hot module이 제대로 동작하는지 확인하자. hot module 적용하기 전에는 페이지가 새로고침 됐었는데, 이제 새로고침 하지 않고 변경된 코드를 적용한다.</p>\n<p>요고는 react-hot-loader를 통해 더 자세히 동작을 알아보자.</p>\n<blockquote>\n<p>HMR 이용시에 source map이 제대로 동작하지 않는 것을 알 수 있다.\n새로고침을 하면 되는데 이유는.. 다음 <a href=\"https://stackoverflow.com/questions/34723571/webpack-hot-module-replacement-hmr-sourcemaps-not-updated-new-code-not-visib\">링크</a>를 참조하자</p>\n</blockquote>\n<h2 id=\"summary\"><a href=\"#summary\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<ul>\n<li>mode는 development와 production이 있는데 각 상황에 맞게 최적화됨.</li>\n<li>코드 번들링 되고 나서 error 발생하는 code를 찾기 힘든데 sourcemap 을 이용하면 됨</li>\n<li>webpack-dev-server와 Hot module replacement를 통해 개발 생산성 높일 수 있음.</li>\n</ul>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"ca23fdbe-7d56-535d-8e49-a7be96bd6d6f","excerpt":"Production 와  의 빌드 목표는 아예 다르다. strong source map localhost server with live reloading or Hot module replacement minified bundles lighter weight source maps load…","html":"<h1 id=\"production\"><a href=\"#production\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Production</h1>\n<p><code class=\"language-text\">development</code>와 <code class=\"language-text\">production</code>의 빌드 목표는 아예 다르다.</p>\n<p><code class=\"language-text\">development</code></p>\n<ul>\n<li>strong source map</li>\n<li>localhost server with live reloading or Hot module replacement</li>\n</ul>\n<p><code class=\"language-text\">production</code></p>\n<ul>\n<li>minified bundles</li>\n<li>lighter weight source maps</li>\n<li>load 시간을 개선하기 위한 optimized assets</li>\n</ul>\n<p>webpack 공홈에서는 <strong>분리된 웹팩 설정</strong> 작성하기를 권장한다.</p>\n<p>분리하긴 할건데 DRY하게 유지하기 위해 공통 설정을 따로 만들거다. 그래서 각 환경에 맞게 merge 할거다. 이것은 <a href=\"https://github.com/survivejs/webpack-merge\"><code class=\"language-text\">webpack-merge</code></a>를 이용할거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D webpack-merge</code></pre></div>\n<p>webpack 폴더를 만들어서 webpack.common.js, webpack.dev.js, webpack.prod.js 파일 3개 만들자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack/webpack.common.js</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[name].[hash].js'</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Production'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n        include<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          loader<span class=\"token punctuation\">:</span> <span class=\"token string\">\"babel-loader\"</span><span class=\"token punctuation\">,</span>\n          options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            cacheDirectory<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// webpack/webpack.dev.js</span>\n<span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token punctuation\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    contentBase<span class=\"token punctuation\">:</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">,</span>\n    hot<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  devtool<span class=\"token punctuation\">:</span> <span class=\"token string\">\"cheap-module-eval-source-map\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// webpack/webpack.prod.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token punctuation\">:</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">,</span>\n  devtool<span class=\"token punctuation\">:</span> <span class=\"token string\">'source-map'</span> <span class=\"token comment\">// 새로 추가된 source map 설정인데 아래에서 다시 설명.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>common.js</p>\n<ul>\n<li>entry, output, babel-loader는 dev와 prod 둘 다 필요하기 때문에 포함</li>\n<li>플러그인은 HMR은 dev에서만 필요하므로 얘를 제외하고 모두 공통 사용</li>\n</ul>\n</li>\n<li>\n<p>dev.js</p>\n<ul>\n<li>HMR, devServer, devtool</li>\n</ul>\n</li>\n<li>\n<p>prod.js</p>\n<ul>\n<li>mode: production</li>\n</ul>\n</li>\n</ul>\n<p>요 3가지를 최상단의 webpack.config.js에서 webpack-merge로 합쳐서 config 설정.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// package.json</span>\n<span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"webpack --env=prod\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"webpack-dev-server --env=dev\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> commonConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./webpack/webpack.common.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> webpackMerge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpack-merge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> argv <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yargs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> envConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`./webpack/webpack.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>argv<span class=\"token punctuation\">.</span>env<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.js`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">webpackMerge</span><span class=\"token punctuation\">(</span>commonConfig<span class=\"token punctuation\">,</span> envConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>scripts 명령어에서 <code class=\"language-text\">--</code>를 통해 argument를 전달할 수 있다.\n이 argument를 편하게 object로 사용하기 위해 <a href=\"https://github.com/yargs/yargs\">yargs</a>를 사용할거다.</p>\n<p>그리고 webpack.config.js에서\nargv.env에 따라 다른 webpack설정을 불러와서 최종 config를 생성할 것이다.</p>\n<h2 id=\"specify-the-mode\"><a href=\"#specify-the-mode\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specify the Mode</h2>\n<p>많은 라이브러리가 라이브러리 내부에 포함되어야만 하는 것을 결정하기 위해 <code class=\"language-text\">process.env.NODE_ENV</code> 변수를 이용한다. 예를 들어, <code class=\"language-text\">production</code> 모드가 아닌 경우에 몇몇 라이브러리는 debuggin을 더 쉽게 하기 위해 testing과 logging을 추가할 것이다.</p>\n<p><code class=\"language-text\">process.env.NODE_ENV === &#39;production&#39;</code> 은 실제 유저를 위해 실행되는 방식을 최적화 하기 위해 중요한 코드를 추가하거나 drop할 것이다. webpack v4부터는 <code class=\"language-text\">mode</code>가 자동으로 <code class=\"language-text\">DefinePlugin</code>(NODE_ENV 같은 환경 변수 설정)을 설정할 것이다.</p>\n<p>여튼 mode: production 하면 자동으로 NODE_ENV가 production 설정되서 최적화된다는 뜻임.</p>\n<h2 id=\"source-mapping\"><a href=\"#source-mapping\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source Mapping</h2>\n<p>production에서 디버깅, bench mark test(?)에 유용한 source map을 권장한다. <code class=\"language-text\">devtool: source-map</code> 을 권장한다. 빌드 속도가 꽤 빠르면서 production 모드에서 쓰기 적합하다.</p>\n<blockquote>\n<p><code class=\"language-text\">inline-***</code> 과 <code class=\"language-text\">eval-***</code>은 production에서 쓰지말자. 번들 사이즈가 늘어나고 전체 퍼포먼스가 저하된다.</p>\n</blockquote>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"d5a85857-958b-5ad9-b944-2a7c7fc2fc9b","excerpt":"Code Split 코드 스플릿은 Webpack의 가장 강력한 기능 중 하나다. 코드를 다양한 번들로 나눈다 이 번들은 필요할 때 로드되거나 병렬로 로드될 수 있다  작은 번들을 만들 때 사용된다 리소스 부하 우선순위 제어할 수 있다 Code Split을 잘 사용하면 load time…","html":"<h1 id=\"code-split\"><a href=\"#code-split\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code Split</h1>\n<p>코드 스플릿은 Webpack의 가장 강력한 기능 중 하나다.</p>\n<ul>\n<li>\n<p>코드를 다양한 번들로 나눈다</p>\n</li>\n<li>\n<p>이 번들은 필요할 때 로드되거나 병렬로 로드될 수 있다 </p>\n</li>\n<li>\n<p>작은 번들을 만들 때 사용된다</p>\n</li>\n<li>\n<p>리소스 부하 우선순위 제어할 수 있다</p>\n</li>\n</ul>\n<p>Code Split을 잘 사용하면 load time에서 이득을 얻을 수 있다.</p>\n<p>웹팩에서 보통 다음 세 가지 방법을 통해 코드 스플릿을 한다.</p>\n<ul>\n<li>Entry Points : <code class=\"language-text\">entry</code> 를 이용한 스플릿 </li>\n<li>중복 방지 : 중복 제거와 chunk별로 스플릿하기 위해 <code class=\"language-text\">SplitChunksPlugin</code>을 이용하기</li>\n<li>Dynamic Import : 모듈 내에서 inline function 호출을 통해 코드 분할하기(inline 함수 내에서 import문을 이용하여 모듈 로드)</li>\n</ul>\n<h2 id=\"1-entry-point\"><a href=\"#1-entry-point\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Entry Point</h2>\n<p>너무 쉬워서 넘어가겠다. <a href=\"https://webpack.js.org/guides/code-splitting/#entry-points\">링크</a> 참조</p>\n<h2 id=\"2-중복-방지\"><a href=\"#2-%EC%A4%91%EB%B3%B5-%EB%B0%A9%EC%A7%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 중복 방지</h2>\n<p><strong>기존 entry나 새로운 chunk의 공통 의존성을 추출한다.</strong></p>\n<p>일부러 중복을 발생시키기 위해</p>\n<ul>\n<li>src/another.js 를 생성하여 lodash를 import 하고, </li>\n<li>src/index.js에서도 동일하게 lodash를 import 해보자.</li>\n</ul>\n<p>빌드를 해보면 2개의 번들에서 lodash를 각각 가지고 있는 모습을 볼 수 있다. 이러한 중복을 줄이기 위해 다음 설정을 추가하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.common.js</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  optimization<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    splitChunks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      chunks<span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 설정 적용 후, npm run build를 다시 실행하면 빌드 결과물이 1개 추가된다.\ndist/app과 another 번들 파일을 확인해보면 lodash가 빠져있고,dist/venders~를 확인해보면 lodash가 포함된것을 알 수 있다. 즉, 공통 의존성은 따로 split하여 중복 제거하는 것을 알 수 있다.</p>\n<hr>\n<h2 id=\"dynamic-imports\"><a href=\"#dynamic-imports\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic imports</h2>\n<p>Dynamic code splitting에 대해서 webpack은 2가지 테크닉을 지원한다.\n권장되는 방법은 dynamic import를 위해 ES proposal에 허용된 <code class=\"language-text\">import()</code> 사용하는 것이다.</p>\n<blockquote>\n<p>import()는 promise를 내부적으로 사용. import() 문 사용할꺼면 older browser에서 Promise polyfill을 이용해야한다는 거 잊지 말자.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    chunkFilename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[name].bundle.js'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>chunkFilename은 아래 webpackChunkName의 주석에 작성된 이름을 가져다 사용한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">dynamicLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"asyncHoilzz\" */</span> <span class=\"token string\">'./async'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> asyncFunc <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">dynamicLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// async.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is async!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 파일 생성 및 코드 추가하여 npm run build하면 dynamic import가 되는 파일이 따로 빌드되는 것을 확인할 수 있다.</p>\n<p>이 코드는 지우자. react 적용할 때 다시 알아보자.</p>\n<h2 id=\"bundle-분석하기\"><a href=\"#bundle-%EB%B6%84%EC%84%9D%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bundle 분석하기</h2>\n<p>(귀찮으면 스킵하거나 <a href=\"https://github.com/hoilzz/create-react-boilerplate-hoil/commit/446cf8593ee4b8c1a5532b1e0a8a6636748d65cc\">복붙</a>하자.)\ncode split하기 시작하면, output을 분석하는 것은 유용하다.</p>\n<p>가장 인기가 많은 <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\">webpack-bundle-analyzer</a>를 설치하여 이용해보자. </p>\n<p>얘로 할 수 있는 건</p>\n<ul>\n<li>bundle 내부에 <strong>진짜로</strong> 뭐가 있는지 나타낸다</li>\n<li>크기를 많이 차지하는 모듈을 확인할 수 있다.</li>\n<li>실수로 번들에 추가된 모듈을 찾을 수도 있다.</li>\n<li>제일 좋은건 minified bundle을 지원하고, 번들링된 모듈의 real size, gzipped size를 알 수 있다!</li>\n</ul>\n<h2 id=\"splitchunksplugin\"><a href=\"#splitchunksplugin\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SplitChunksPlugin</h2>\n<p>SplitChunksPlugin에 대해 자세히 알아보자. 자세히 알아보기 싫으면 아래 코드만 적용하자.</p>\n<p>원래 청크는 웹팩 내부 그래프에서 parent-child 관계로 연결되어있다. </p>\n<p>중복 피하기, 최적화를 하는데\n다음 조건에 기반하여 chunk를 쪼갠다.</p>\n<ul>\n<li>\n<p>새로운 청크는 </p>\n<ul>\n<li>공유되거나</li>\n<li><code class=\"language-text\">node_modules</code> folder에 있는 모듈(ex. react)일 수 있다. (모듈은~ 이 문장이 뭔소린지 잘 모르겠다.)</li>\n</ul>\n</li>\n<li>새로운 청크는 30Kb보다 크다.</li>\n<li>on demand 청크를 로드할 때 병렬 요청의 최대 개수는 5개 이하다.</li>\n<li>첫 페이지 병렬 요청의 최대 개수는 3개 이하다.</li>\n</ul>\n<p>마지막 2가지 조건을 충족 할 때, 더 큰 청크가 권장된다. 즉 여러개 작은 청크보다는 1개 청크가 더 낫다는 얘기같다.</p>\n<p>청크를 어떤식으로 활용하는지 알고 싶다면 다음 <a href=\"https://webpack.js.org/plugins/split-chunks-plugin/#examples\">공홈 링크</a>를 참고하자.</p>\n<p>이 중 2번째 예제를 참고하여 만들겠다.</p>\n<p><code class=\"language-text\">node_modules</code>의 모든 코드를 포함하는 <code class=\"language-text\">vendors</code> chunk를 만들자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  optimization<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    splitChunks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      cacheGroups<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        commons<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/[\\\\/]node_modules[\\\\/]/</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">'vendors'</span><span class=\"token punctuation\">,</span>\n          chunks<span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>splitChunks.cacheGroups</p>\n<ul>\n<li>\n<p>cachegroups은 특정 조건으로 chunk를 생성하라고 webpack에게 말하는거.</p>\n<ul>\n<li>node_modules를 포함하고</li>\n<li>이름은 vendors</li>\n<li>chunks는 3가지 값을 가짐</li>\n<li>initial : 초기 로드 되는 것만 청크에 추가</li>\n<li>async : 동적 로드 되는 것만 청크에 추가</li>\n<li>all : 3개 중 가장 강력함. initial + async인데, 청크는 async와 non-async 청크 간에 공유될 수 있음 </li>\n</ul>\n</li>\n</ul>\n<p>위 설정은 모든 외부 패키지를 포함하는 큰 청크를 만들거다. core framework, utilities만 vendors로 포함시키고 나머지 종속성은 동적 로드하는 것을 권장한다.</p>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"d099a874-d0aa-5c84-a75d-fc3485868553","excerpt":"5. Caching 브라우저가 static 자원을 요청할 때, 불필요한 traffic을 줄이기 위해 캐싱 기법을 이용한다. 근데 이 캐싱 기법 이용시에 새로운 코드가 배포됐을 시에는 서버의 응답값으로 캐싱된 자원을 주면 안된다. 기존에는(그냥 내가 알기에 기존에는..) 자원 요청 url…","html":"<h1 id=\"5-caching\"><a href=\"#5-caching\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Caching</h1>\n<p>브라우저가 static 자원을 요청할 때, 불필요한 traffic을 줄이기 위해 캐싱 기법을 이용한다. 근데 이 캐싱 기법 이용시에 새로운 코드가 배포됐을 시에는 서버의 응답값으로 캐싱된 자원을 주면 안된다. 기존에는(그냥 내가 알기에 기존에는..) 자원 요청 url에 쿼리스트링에 timestamp를 이용하여 캐시기법을 이용했다. 근데 이 기법은 코드 변경 유무와 관계없이 빌드될 때마다 timestamp가 변경되었다. 이것의 문제점은 코드가 변경되지 않았어도 timestamp가 변경되어 불필요한 트래픽을 유발한다.</p>\n<p>이것을 웹팩은 contents가 바뀌지 않은 경우에는 cached 된채로 남겨두는 컴파일 방법을 통하여 쉽게 해결할 수 있다.</p>\n<h2 id=\"output-filename\"><a href=\"#output-filename\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>output filename</h2>\n<p><code class=\"language-text\">output.filename</code> <a href=\"https://webpack.js.org/configuration/output/#output-filename\">대체</a> 기법을 이용하여 output file 이름을 정의할 수 있다. </p>\n<p>이 중 <code class=\"language-text\">[contenthash]</code> 대체 기법을 이용하여 unique hash를 filename에 추가할 것이다.</p>\n<blockquote>\n<p>[contenthash]\nasset content가 변경될 때만 [contenthash]가 변경됨.</p>\n</blockquote>\n<p>webpack의 output.filename을 다음과 같이 변경하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  filename<span class=\"token punctuation\">:</span> <span class=\"token string\">\"[name].[contenthash].js\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>npm run build 해보자. 2번 반복해서 hash값이 그대로인지 확인하고, 코드 한 줄 변경 후 hash값이 변경됐는지 확인하자.</p>\n<p>이와 같이 실제 코드가 변경됐을 때만 hash값이 변경된다.</p>\n<p>근데 위와 같이 적용하여 build 명령어는 잘 되지만, webpack devser를 실행시 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ERROR in chunk main [entry]\n[name].[chunkhash].js\nCannot use [chunkhash] or [contenthash] for chunk in &#39;[name].[chunkhash].js&#39; \n(use [hash] instead)</code></pre></div>\n<p><a href=\"https://stackoverflow.com/questions/50217480/cannot-use-chunkhash-or-contenthash-for-chunk-in-name-chunkhash-js-us\">관련 내용</a> 을 찾아보니 HMR plugin때문에 발생하는 거 같다.</p>\n<p>해결책은 HMR을 사용하지 않거나, contenthash를 사용하지 않는것이다. </p>\n<p>HMR을 사용하지 않을 수 없으니 production 일때 contenthash 사용, dev일 때는 hash를 사용한다.</p>\n<p>또 한 가지 문제가 있는데, 코드 수정시 관련 chunk에 대해서만 hot-update를 하기 위해 HMR을 이용한다. 하지만 output의 filename에 hash를 사용하기 때문에, 모든 compile마다 hash가 새로 생성되어 모든 파일명이 바뀌면서 전부 재빌드를 하게되는.. 약간 비효율적으로 보인다. dev 개발시에는 filename을 고정값으로 하여 하면 기존 HMR 방식대로 개발환경을 갖출 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    filename<span class=\"token punctuation\">:</span>\n      argv<span class=\"token punctuation\">.</span>env <span class=\"token operator\">===</span> <span class=\"token string\">\"prod\"</span>\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"[name].[contenthash].js\"</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token string\">\"[name].bundle.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"6b4f0afd-aa16-5376-bb3c-128ea6f192c9","excerpt":"8. build performance build/compilation 퍼포먼스의 개선을 위한 유용한 팁 모음집. General 일단 prod와 dev를 나눠서 세팅하는 것을 전제로한다.\ndev와 prod의 목표는 다르기 때문이다. strong source map localhost…","html":"<h1 id=\"8-build-performance\"><a href=\"#8-build-performance\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. build performance</h1>\n<p>build/compilation 퍼포먼스의 개선을 위한 유용한 팁 모음집.</p>\n<h2 id=\"general\"><a href=\"#general\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>General</h2>\n<p>일단 prod와 dev를 나눠서 세팅하는 것을 전제로한다.\ndev와 prod의 목표는 다르기 때문이다.</p>\n<blockquote>\n<p><code class=\"language-text\">development</code></p>\n</blockquote>\n<ul>\n<li>strong source map</li>\n<li>localhost server with live reloading or Hot module replacement</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">production</code></p>\n</blockquote>\n<ul>\n<li>minified bundles</li>\n<li>lighter weight source maps</li>\n<li>load 시간을 개선하기 위한 optimized assets</li>\n</ul>\n<p>…</p>\n<h3 id=\"smaller--faster\"><a href=\"#smaller--faster\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Smaller == Faster</h3>\n<p>빌드 퍼포먼스를 증가시키기 위해 컴파일의 total size를 감소시켜야한다. chunk를 작게 유지하자.</p>\n<ul>\n<li>fewer/smaller libraries를 이용하자.</li>\n<li>Multi-page Application이거나 async로드 되는 모듈을 위해 <code class=\"language-text\">CommonsChunkPlugin</code>을 사용하자</li>\n<li>현재 개발 중인 코드의 <strong>부분만</strong> 컴파일하자.</li>\n</ul>\n<h2 id=\"development\"><a href=\"#development\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Development</h2>\n<h3 id=\"compile-in-memory\"><a href=\"#compile-in-memory\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>compile in memory</h3>\n<p>webpack-dev-server는 컴파일하여 assets을 disk에 쓰는게 아닌 메모리에서 제공하기 때문에 퍼포먼스를 개선시킨다.</p>\n<h3 id=\"devtool\"><a href=\"#devtool\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Devtool</h3>\n<p>cheap-module-eval-source-map이 대부분의 경우에 베스트 옵션이다.</p>\n<h3 id=\"production에만-쓰이는-툴-피하자\"><a href=\"#production%EC%97%90%EB%A7%8C-%EC%93%B0%EC%9D%B4%EB%8A%94-%ED%88%B4-%ED%94%BC%ED%95%98%EC%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Production에만 쓰이는 툴 피하자</h3>\n<p>예컨대 개발 중에 code를 minify, mangle 하는 것은 말이 안된다. 이 툴은 dev에서 제외되어야 한다. <a href=\"https://webpack.js.org/guides/build-performance/#avoid-production-specific-tooling\">참고</a></p>\n<ul>\n<li>TerserPlugin</li>\n<li>ExtractTextPlugin</li>\n<li>hash / chunkhash</li>\n</ul>\n<h2 id=\"production\"><a href=\"#production\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Production</h2>\n<h3 id=\"source-maps\"><a href=\"#source-maps\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source Maps</h3>\n<p>Source maps are really expensive. Do you really need them?</p>\n<p>production 세팅할 때, sourcemap 넣었는데.. 필요한 상황이 아니면 빼야겠다..</p>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"956d17b9-d720-5f66-a1d2-fe26d2194ee7","excerpt":"9. Resolve Resolve에 대한 기초는  여기서  확인하자. 여태 세팅하지 않고도 resolve를 잘해줬는데, 이유는 webpack이 합리적인 defaults 옵션을 제공하기 때문이다.  여튼 Resolve 옵션은 module이 resolve…","html":"<h1 id=\"9-resolve\"><a href=\"#9-resolve\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. Resolve</h1>\n<p>Resolve에 대한 기초는 <a href=\"https://github.com/hoilzz/TIL/blob/master/FrontEnd/webpack/%EA%B3%B5%ED%99%88%EB%B2%88%EC%97%AD/module-resolution.md\">여기서</a> 확인하자.</p>\n<p>여태 세팅하지 않고도 resolve를 잘해줬는데, 이유는 webpack이 합리적인 defaults 옵션을 제공하기 때문이다. </p>\n<p>여튼 Resolve 옵션은 module이 resolve 되는 방식을 변경시킨다.\n예컨대 <code class=\"language-text\">import &#39;lodash&#39;</code> 호출시, <code class=\"language-text\">resolve</code> 옵션은 웹팩이 <code class=\"language-text\">lodash</code>를 찾는 방법을 변경시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// config options</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"resolving-for-build-performance\"><a href=\"#resolving-for-build-performance\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolving for build performance</h2>\n<p>다음 스텝은 resolve 속도를 올려준다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">resolve.modules</code>, <code class=\"language-text\">resolve.extensions</code>, <code class=\"language-text\">resolve.mainFiles</code>, <code class=\"language-text\">resolve.descriptionFiles</code>의 값의 개수를 최소화하자. 얘네들은 filesystem call 수를 증가시킨다.</p>\n</li>\n<li>\n<p>만약 symlink를 사용하지 않는다면 <code class=\"language-text\">resolve.symlinnks: false</code>를 사용하자.</p>\n</li>\n</ul>\n<h3 id=\"code-classlanguage-textresolvemodulescode\"><a href=\"#code-classlanguage-textresolvemodulescode\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">resolve.modules</code></h3>\n<ul>\n<li>\n<p>웹팩에게 module을 resolve할 때, 어떤 디렉토리를 찾아야 하는지 알려준다.</p>\n</li>\n<li>\n<p>절대 경로와 상대 경로 둘 다 사용되는데, 두 경로가 약간 다르게 행동한다. </p>\n</li>\n<li>\n<p>상대경로는 Node가 <code class=\"language-text\">node_modules</code>를 스캔하는 방식과 비슷하다. 현재 디렉토리의 node<em>module을 뒤지고 없으면 그 위의 node</em>module.. 루트까지 올라간다.</p>\n</li>\n<li>\n<p>절대 경로는 주어진 절대경로만 검색한다.</p>\n</li>\n</ul>\n<p>보통은 다음과 같이 세팅한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>특정 디렉토리를 추가하게 될 경우 node_modules의 앞에 오게하자</strong></p>\n<h3 id=\"code-classlanguage-textresolveextensionscode\"><a href=\"#code-classlanguage-textresolveextensionscode\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">resolve.extensions</code></h3>\n<ul>\n<li>자동으로 특정 확장자만 resolve한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">]</span>\n    extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">]</span><span class=\"token comment\">// , .scss ,.css]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>scss나 css가 추가되어 같이 빌드하려면 추가해주면 된다.</li>\n</ul>\n<hr>\n<p>요기까지 해서 js 개발시 최소로 필요한 세팅을 완료하였다. 다음은 포스팅은 react 개발 가능하도록 세팅을 하고 마무리하도록 하겠다.</p>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"e0b46484-38ad-587c-ab79-115bf47b2dd1","excerpt":"react 바벨 설정 jsx syntax, react 관련 syntax를 transform 할 preset을 추가하자. babel-loader의 include 설정이 잘못되어서 transpile이 전혀 되지 않고 있었다… 다음과 같이 수정하자 webpack-dev-server root…","html":"<h1 id=\"react\"><a href=\"#react\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i react react-dom react-prop-types</code></pre></div>\n<h2 id=\"바벨-설정\"><a href=\"#%EB%B0%94%EB%B2%A8-%EC%84%A4%EC%A0%95\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바벨 설정</h2>\n<p>jsx syntax, react 관련 syntax를 transform 할 preset을 추가하자.</p>\n<blockquote>\n<p>babel-loader의 include 설정이 잘못되어서 transpile이 전혀 되지 않고 있었다… 다음과 같이 수정하자</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// babel.config.js -> .babelrc.js</span>\n\n<span class=\"token comment\">// webpack.common.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n      include<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>rootPath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">//...</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack-dev-server</h2>\n<p>root를 id로 가지는 div를 index.html에 포함시켜야 하기 때문에 public/index.html을 생성하여 div를 추가하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  open<span class=\"token punctuation\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  history\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"react-hot-loader\"><a href=\"#react-hot-loader\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-hot-loader</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i react-hot-loader</code></pre></div>\n<p>react-hot-loader는 dev 환경에서만 사용하는 패키지다. 서비스 코드에 나갈 얘가 아니면 devDependency인데, getting started에서 왜 dependency에 설치하라고 작성했는지 궁금했다.</p>\n<p>걍 이유는 <a href=\"https://github.com/gaearon/react-hot-loader/issues/675\">다음</a>과 같다. 답변에 <a href=\"https://github.com/gaearon/react-hot-loader/issues/675\">README</a>에도 명시 하겠다고 해서 확인했더니 있다.</p>\n<blockquote>\n<p>Note: react-hot-loader는 dev dependency 대신에 dependency로 안전하게 설치할 수 있다. 왜냐하면 react-hot-loader가 자동으로 production에서는 실행하지 않도록 되어있기 때문이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-hot-loader/root'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hoilzzzz<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">hot</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>hot 관련 메서드를 추가하여, npm start로 데브서버 띄운 후에 코드를 조금씩 바꿔가며 hot load가 되는지 확인하자.(새로고침 되지않고 브라우저 콘솔에서 hot-update 내용이 나오는지 확인하면 된다.)</p>\n<h2 id=\"code-split\"><a href=\"#code-split\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>code-split</h2>\n<p>리액트 이용시에도 코드 스플릿이 제대로 동작하는지 알아보자. 이왕하면 간단한 리액트 애플리케이션을 만들면서 알아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i react-router-dom</code></pre></div>\n<p>추가된 <a href=\"https://github.com/hoilzz/create-react-boilerplate-hoil/commit/f5509353d0c4b0cad0a3f00d0931c3ab4437c743\">어플리케이션 코드</a></p>\n<p>위 페이지에서 asyncPage는 해당 페이지에 들어가기 전까지 로드할 필요가 없는 코드다. 이러한 코드들을 분리하여 필요할 때만 로드하도록 즉, 이 페이지에 진입했을 때만 불러올 수 있도록 할 수 있다. </p>\n<p>React의 lazy, suspense를 이용하여 code split을 해보자.</p>\n<p>추가된 <a href=\"https://github.com/hoilzz/create-react-boilerplate-hoil/commit/0d04a7746e6c12e0283ad1391e361941fa67a156\">코드</a></p>\n<p>다음과 같은 오류가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Support for the experimental syntax &#39;dynamicImport&#39; isn&#39;t currently enabled \n...\nAdd @babel/plugin-syntax-dynamic-import (https://git.io/vb4Sv) to the &#39;plugins&#39; section of your Babel config to enable parsing.</code></pre></div>\n<p>친절하게 뭘 추가하른지 알려줬다. 추가해주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D @babel/plugin-syntax-dynamic-import</code></pre></div>\n<p>router에서 다음과 같은 에러를 본다면 다음 <a href=\"https://github.com/ReactTraining/react-router/issues/6471\">링크</a>를 참조하자. 4.4-beta에서 해결했다고한다. </p>\n<p>npm start하여 빌드 결과물을 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">            Asset       Size   Chunks             Chunk Names\n      0.bundle.js   3.49 KiB        0  [emitted]\n      1.bundle.js   2.79 KiB        1  [emitted]\n    app.bundle.js     48 KiB      app  [emitted]  app\n       index.html  420 bytes           [emitted]\nvendors.bundle.js   3.74 MiB  vendors  [emitted]  vendors</code></pre></div>\n<p>0, 1번 번들로 나뉜것을 알 수 있는데 filename을 작성해주고 싶으면 <a href=\"https://webpack.js.org/guides/code-splitting/#dynamic-imports\">요기</a> 참고하자.</p>\n<p>그리고 실제로 async page 진입시에 split된 chunk를 요청하는지 알아보자.</p>\n<p>개발자도구의 network 탭을 열어놓고 async 페이지 진입하여 0.bundle.js 나 [chunkname].bundle.js 를 요청하는 것을 확인할 수 있다.</p>","frontmatter":{"title":"","date":null,"lang":null}}}]}},"pageContext":{}}