{"data":{"site":{"siteMetadata":{"title":"hoilzz","author":"hoilzz","siteUrl":"","comment":{"disqusShortName":"","utterances":"hoilzz/hoilzz.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a1ca0b92-ba6f-583d-b11e-6cab2ec7ac66","excerpt":"4. 개발 환경 갖추기 얘는 production mode에서는 필요없는 설정이다. development mode에서만 필요하다. 일단 mode를 development로 설정하자. mode \n각 모드에 따라 최적화가 달라진다.\ndev는 개발의 생산성을 높이기 위한 설정. production은 생산성은 고려하지 않고 실제 서비스 될 때 필요한 최적화 설정이 포함됨.\n가장 큰 차이점은 bundle 빌드시 production에서 treeshaking이 가능하고 development는 불가능 source…","html":"<h1 id=\"4-개발-환경-갖추기\"><a href=\"#4-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B0%96%EC%B6%94%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 개발 환경 갖추기</h1>\n<p>얘는 production mode에서는 필요없는 설정이다. development mode에서만 필요하다.</p>\n<p>일단 mode를 development로 설정하자.</p>\n<blockquote>\n<p><a href=\"https://webpack.js.org/concepts/mode/#mode-development\">mode</a>\n각 모드에 따라 최적화가 달라진다.\ndev는 개발의 생산성을 높이기 위한 설정. production은 생산성은 고려하지 않고 실제 서비스 될 때 필요한 최적화 설정이 포함됨.\n가장 큰 차이점은 bundle 빌드시 production에서 treeshaking이 가능하고 development는 불가능</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"source-map-이용하기\"><a href=\"#source-map-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>source map 이용하기.</h2>\n<p>코드가 번들링 됐을 때, 어떤 코드 라인에서 에러 발생했는지 추적하기 어렵다. </p>\n<p>그래서 JS에서 <a href=\"https://blog.teamtreehouse.com/introduction-source-maps\">source map</a>을 제공한다. 이것은 컴파일된 코드가 원래 소스코드에 매핑된다. 또한, <a href=\"https://webpack.js.org/configuration/devtool/\">다양한 옵션</a>을 가진다.</p>\n<p><a href=\"https://webpack.js.org/configuration/devtool/#development\">웹팩에서 권장하는 개발 환경에 적합한 옵션</a>에서 <code class=\"language-text\">cheap-module-eval-source-map</code>을 사용할거다. </p>\n<p>요거에 대한 장점과 테스트는 webpack-dev-server까지 설치하여 실습하며 알아보자.</p>\n<h2 id=\"webpack-dev-server-이용하기\"><a href=\"#webpack-dev-server-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack-dev-server 이용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D webpack-dev-server</code></pre></div>\n<p>webpack-dev-server는 간단한 web server를 제공하고 live reloading 기능을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    contentBase<span class=\"token punctuation\">:</span> <span class=\"token string\">'./dist'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  devtool<span class=\"token punctuation\">:</span> 'cheap<span class=\"token operator\">-</span>module<span class=\"token operator\">-</span>eval<span class=\"token operator\">-</span>source<span class=\"token operator\">-</span>map\"\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>contentBase는 웹팩 output.path와 동일해야한다. </p>\n<blockquote>\n<p>WDS(webpack-dev-server)는 compile 후에 output 파일을 작성하지 않는다. 대신에, web server 메모리에 bundle 파일을 저장하고 그것을 제공한다. 만약 페이지가 bundle file을 다른 path에서 찾아야한다면, <code class=\"language-text\">publicPath</code> 옵션을 이용하여 경로를 설정해줘야한다.</p>\n</blockquote>\n<p>npm 명령어에 데브서버 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;scripts&quot;: {\n  &quot;start&quot;: &quot;webpack-dev-server&quot;\n}</code></pre></div>\n<p>이제 일부러 error를 내보자. (아무거나 해보자.)</p>\n<p>콘솔 창을 보면 오류난 코드의 라인을으로 매핑되는 것을 확인할 수 있다.</p>\n<p>cheap-module-eval-source-map의 기능을 볼 수 있는데,</p>\n<ul>\n<li>cheap이 붙는 이유는 column mapping은 되지 않기 때문이다</li>\n<li>대신, line number로 매핑된다.</li>\n<li>eval이 붙은 이유는 각 모듈은 <code class=\"language-text\">eval()</code>로 실행되기 때문이다.</li>\n</ul>\n<h2 id=\"hot-moudle-replacement\"><a href=\"#hot-moudle-replacement\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>hot moudle replacement</h2>\n<p>현재 webpack-dev-server는 코드 수정 후 저장하게 되면 전체 페이지를 reload 한다.</p>\n<p>HMR은 웹팩에서 제공하는 가장 유용한 것 중 하나임. 전체 페이지 새로고침 없이 runtime 중에 업데이트되는 모듈이다. (요번 모듈은 production에서 사용하지 않을거임)</p>\n<p>webpack-dev-server와 webpack 내장 기능인 HMR plugin을 이용할거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>l\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    hot<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// index.js</span>\n\n<span class=\"token comment\">//...</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./math.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에 있던 subtract 함수를 module.hot.accept의 2번째 함수로 옮기자.</p>\n<p>그리고 subtract 함수의 연산식을 *,/ 로 바꿔가며 hot module이 제대로 동작하는지 확인하자. hot module 적용하기 전에는 페이지가 새로고침 됐었는데, 이제 새로고침 하지 않고 변경된 코드를 적용한다.</p>\n<p>요고는 react-hot-loader를 통해 더 자세히 동작을 알아보자.</p>\n<blockquote>\n<p>HMR 이용시에 source map이 제대로 동작하지 않는 것을 알 수 있다.\n새로고침을 하면 되는데 이유는.. 다음 <a href=\"https://stackoverflow.com/questions/34723571/webpack-hot-module-replacement-hmr-sourcemaps-not-updated-new-code-not-visib\">링크</a>를 참조하자</p>\n</blockquote>\n<h2 id=\"summary\"><a href=\"#summary\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<ul>\n<li>mode는 development와 production이 있는데 각 상황에 맞게 최적화됨.</li>\n<li>코드 번들링 되고 나서 error 발생하는 code를 찾기 힘든데 sourcemap 을 이용하면 됨</li>\n<li>webpack-dev-server와 Hot module replacement를 통해 개발 생산성 높일 수 있음.</li>\n</ul>","frontmatter":{"title":"4. 나만의 webpack 만들기 - 개발 환경 구축하기","date":"February 05, 2019"}}},"pageContext":{"slug":"/webpack/4-development-environment/","previous":{"fields":{"slug":"/webpack/3-output/"},"frontmatter":{"title":"3. 나만의 webpack 만들기 - output","category":"webpack"}},"next":{"fields":{"slug":"/webpack/5-production/"},"frontmatter":{"title":"4. 나만의 webpack 만들기 - prodiuction","category":"webpack"}}}}