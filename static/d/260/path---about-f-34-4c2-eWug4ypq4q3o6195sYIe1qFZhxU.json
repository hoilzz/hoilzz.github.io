{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"9d128ab7-1b79-5684-a6a6-7f5b50395b6e","excerpt":"Your name hoilzz","html":"<h1 id=\"your-name\"><a href=\"#your-name\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Your name</h1>\n<div align=\"center\">\n<p><em>hoilzz</em></p>\n</div>","frontmatter":{"title":"about","date":"January 27, 2019","lang":"en"}}},{"node":{"id":"8dd83bbc-2c87-56b3-aa6b-5c83effe6c0e","excerpt":"2. add babel babel은 JS Compiler다. 바벨은 ES6+ code를 ES5로 변경해준다. 그래서 하위 브라우저(IE..)에 대응할 수 있다. 바벨  getting started  제안하는 package를 먼저 설치하자. core : transpile…","html":"<h1 id=\"2-add-babel\"><a href=\"#2-add-babel\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. add babel</h1>\n<p>babel은 JS Compiler다.</p>\n<p>바벨은 ES6+ code를 ES5로 변경해준다. 그래서 하위 브라우저(IE..)에 대응할 수 있다.</p>\n<p>바벨 <a href=\"https://babeljs.io/docs/en/usage\">getting started</a> 제안하는 package를 먼저 설치하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -D @babel/core @babel/preset-env babel-loader\nnpm install @babel/polyfill</code></pre></div>\n<ul>\n<li>\n<p>core : transpile시 이용되는 코어 모듈</p>\n</li>\n<li>\n<p>preset-env : 최신 JS를 이용할 수 있도록 해주는 smart preset. 얘 이용하면 어떤 syntax가 타겟 환경에 맞춰서 transpile되어야 하는지 micromanage가 필요하지 않음. 그냥 얘 사용하면 편안-하고 bundle도 더 작아짐. (자세히 알고싶으면 <a href=\"https://babeljs.io/docs/en/babel-preset-env\">링크</a>)</p>\n<ul>\n<li>babel 설정할 때 또 추가 설명할거임</li>\n</ul>\n</li>\n<li>\n<p>polyfill : ES6+ 환경을 제공한다. 그리고 library/tool 보다는 실제 서비스코드에서 사용된다.</p>\n<ul>\n<li>new built-in인 Promise, WeakMap 등을 사용할 수 있도록, polyfill은 global scope 혹은 native Prototypes에 추가할 것이다.</li>\n</ul>\n</li>\n</ul>\n<p>그래서 transpile에 사용되는 패키지들은 devDependency로, 서비스 코드에 포함되어야 하는 polyfill은 dependency로 설치한다.</p>\n<h2 id=\"webpack에-babel-설정-추가하기\"><a href=\"#webpack%EC%97%90-babel-%EC%84%A4%EC%A0%95-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack에 babel 설정 추가하기.</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D babel-loader</code></pre></div>\n<p>loader를 자세히 알고싶다면.. <a href=\"https://github.com/hoilzz/TIL/blob/master/FrontEnd/webpack/%EA%B3%B5%ED%99%88%EB%B2%88%EC%97%AD/loader.md\">링크</a></p>\n<p>loader는 걍 전처리기임.</p>\n<p>일단,</p>\n<p>build 결과물을 편하게 보기 위해 math파일을 추가하자.\n그리고 이 파일을 index.js에서 import 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// math.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subtract</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add<span class=\"token punctuation\">,</span> subtract <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./math\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 + 3 : \"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 = 3 : \"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js에 module 추가.</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n      exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n      include<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>module 옵션\n번들링 처리할 떄, 웹팩 자체만으로 처리할 수 없는 확장자나 JS지만 ESNext로 작성된 모듈들을 module 옵션으로 처리할 수 있다. 이 떄 module 옵션은 loader를 사용한다.</p>\n</blockquote>\n<ul>\n<li>test : regex를 통해 load할 파일 지정.</li>\n<li>exclude : 바벨 로더는 느림. 가능한 적은 양의 파일만 transforming 해야함. transforming할 필요가 없는 node_modules를 제외.</li>\n<li>\n<p>use : 사용할 모듈 및 모듈에 대한 옵션 작성.</p>\n<ul>\n<li>요 설정이 너무 길어질거 같으면 babel.config.js 파일을 따로 생성하여 관리.</li>\n</ul>\n</li>\n<li>include : 로더 모듈이 실제로 필요한 얘들만 transform 하도록 할 수 있다. (<strong>필요한 최소 모듈만 로더에 적용하면 빌드 퍼포먼스가 개선되기 때문에 다른 loader 이용시에도 필수로 사용하자.</strong>)</li>\n</ul>\n<blockquote>\n<p>babel-loader가 느리기 때문에 더 빠르게 하려면\ncacheDirectory 옵션을 이용하자. </p>\n<ul>\n<li>얘는 filesystem에 transformation(loader의 결과물)을 캐싱하여 2x정도 더 빠르게 할 수 있다.</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 프로젝트 루트 폴더에 babel.config.js 생성</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/env\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        modules<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        useBuiltIns<span class=\"token punctuation\">:</span> <span class=\"token string\">\"usage\"</span><span class=\"token punctuation\">,</span>\n        targets<span class=\"token punctuation\">:</span> <span class=\"token string\">\"> 0.25%, not dead\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// plugins: []</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>babel은 크게 preset과 plugin으로 나뉜다.\npreset은 바벨 플러그인의 배열처럼 행동하는데, 플러그인들을 모아놓은 거라고 생각하면 된다. </p>\n<blockquote>\n<p>preset은 @babel/preset-stage-X X는 0~4까지 있음. stage들이 각각의 플러그인 모음집.\nplugin은 바벨이 컴파일시 transformation에 이용된다.\n예를 들어 @babel/plugin-transform-arrow-functions 얘는  ES6 화살표 함수에 대해 위 플러그인을 이용하여 transformation을 진행.</p>\n</blockquote>\n<p>요약하면 어떤 plugin쓸지 모를 때 plugin 모음집 preset 사용하면됨. 그러다가 preset이 transformation 하지 못하는 특정 ES6+ syntax를 사용할 경우, 그 특정 플러그인만 추가해주면됨.</p>\n<p>여튼 우리는 rough한 설정을 할꺼니까 preset만 설정해주면된다.\n@babel/preset-env 설정에 대해 알아보자.</p>\n<ul>\n<li>\n<p>targets : <a href=\"https://github.com/browserslist/browserslist\">browserlist</a>와 같이 target browser 설정할 수 있음. </p>\n<ul>\n<li>걍 바벨 공홈에서 써진걸로 설정. </li>\n</ul>\n</li>\n<li>\n<p>modules : ES6 모듈 문법을 다른 모듈타입으로 변경하는건데, false로 한 이유는 import/export 문을 그대로 사용하기 위함.</p>\n<ul>\n<li>왜냐하면 webpack의 treeshaking은 import/export로 이뤄져야하기 때문(자세한건 <a href=\"https://medium.com/naver-fe-platform/webpack%EC%97%90%EC%84%9C-tree-shaking-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-1748e0e0c365\">이 글</a> 읽으면 될듯)</li>\n</ul>\n</li>\n<li>\n<p>useBuiltIns</p>\n<ul>\n<li>바벨7이 되기 전에 babel/polyfill을 웹팩 엔트리에 별개로 추가하여 import 했었음.</li>\n<li>근데 이렇게 하면 사용하지 않는(불필요한) polyfill도 import하는 문제 발생.</li>\n<li>그래서 usage라는 설정이 추가됨.</li>\n<li>말 그대로 각 파일에서 사용되는 polyfill만 import함.</li>\n<li>근데 해당 브라우저에서 지원하는 syntax일 경우 import 하지 않음. 즉, 조건 하나를 더 추가(브라우저에서 지원하지 않을 경우) 하여 import</li>\n<li>예제를 보고 싶거나 자세히 알고 싶으면 <a href=\"https://babeljs.io/docs/en/babel-preset-env#usebuiltins\">링크</a> 이동</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"summary\"><a href=\"#summary\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<ul>\n<li>\n<p>바벨은 하위 브라우저에 대응하기 위한 JS Compiler다.</p>\n<ul>\n<li>ES6+ code를 ES5로 변경해준다.</li>\n<li>이 때 변경 규칙은, preset, plugin이 존재하면 이것을 따른다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"d2a0fa90-92c1-5447-aed0-5a4765dad710","excerpt":"3. output 만약에 서비스하는 앱이라면, 점점 커질 수 있다.  file 이름에 hash를 이용하여  static resource에 대해 캐싱할 수 있다. 일단, output 이름부터 지정해주자. (사실 안해줘도 되는데 나중에 entry…","html":"<h1 id=\"3-output\"><a href=\"#3-output\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. output</h1>\n<p>만약에 서비스하는 앱이라면, 점점 커질 수 있다. <a href=\"https://webpack.js.org/guides/caching/\">file 이름에 hash를 이용하여</a> static resource에 대해 캐싱할 수 있다.</p>\n<p>일단, output 이름부터 지정해주자. (사실 안해줘도 되는데 나중에 entry가 여러개가 될 경우를 대비해서 미리 세팅해주자.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">entry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">:</span> <span class=\"token string\">\"./src/index.js\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\noutput<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  filename<span class=\"token punctuation\">:</span> <span class=\"token string\">\"[name].bundle.js\"</span><span class=\"token punctuation\">,</span>\n  path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>특정 entry의 key를 app으로 변경하고, output의 <code class=\"language-text\">[name]</code>을 통해 빌드 결과물의 이름을 설정할 수 있다.</p>\n<p>npm run build로 빌드된 파일명이 app.bundle.js로 변경됐는지 확인하자.</p>\n<h2 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>html-webpack-plugin</h2>\n<p>앞에서 entry 포인트의 key값을 output의 filename으로 갖도록 변경해보았다. 근데 entry point 이름이 바뀔 때마다 index.html에서 참조하고 있는 js 파일이름을 바꿔줘야한다.</p>\n<p>htmlwebpackplugin을 통해 이 문제를 해결하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D html-webpack-plugin</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>htmlwebpackplugin은</p>\n<ul>\n<li>index.html을 자동 생성</li>\n<li>bundles 요청하는 script문을 변경된 파일이름으로 자동으로 추가</li>\n</ul>\n<p>npm run build하고, dist 폴더 내의 index.html을 열어보자.\nscript문이 자동으로 추가된 것을 확인할 수 있다.</p>\n<h2 id=\"dist-folder의-파일들-자동-삭제하기\"><a href=\"#dist-folder%EC%9D%98-%ED%8C%8C%EC%9D%BC%EB%93%A4-%EC%9E%90%EB%8F%99-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>/dist folder의 파일들 자동 삭제하기</h2>\n<p>현재 dist폴더 내부에 main.js, app.bundle.js 등이 혼재되어있다. 나중에 빌드 결과물에 대해 캐싱 기법을 적용하기 위해 파일명에 hash값을 사용할텐데, dist 폴더 안에 파일이 계속 추가될것이다.</p>\n<p>그래서 매번 빌드할 때마다 자동으로 dist 폴더를 삭제하는 플러그인 이용 할거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D clean-webpack-plugin</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"a1ca0b92-ba6f-583d-b11e-6cab2ec7ac66","excerpt":"4. 개발 환경 갖추기 얘는 production mode에서는 필요없는 설정이다. development mode에서만 필요하다. 일단 mode를 development로 설정하자. mode \n각 모드에 따라 최적화가 달라진다.\ndev…","html":"<h1 id=\"4-개발-환경-갖추기\"><a href=\"#4-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B0%96%EC%B6%94%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 개발 환경 갖추기</h1>\n<p>얘는 production mode에서는 필요없는 설정이다. development mode에서만 필요하다.</p>\n<p>일단 mode를 development로 설정하자.</p>\n<blockquote>\n<p><a href=\"https://webpack.js.org/concepts/mode/#mode-development\">mode</a>\n각 모드에 따라 최적화가 달라진다.\ndev는 개발의 생산성을 높이기 위한 설정. production은 생산성은 고려하지 않고 실제 서비스 될 때 필요한 최적화 설정이 포함됨.\n가장 큰 차이점은 bundle 빌드시 production에서 treeshaking이 가능하고 development는 불가능</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"source-map-이용하기\"><a href=\"#source-map-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>source map 이용하기.</h2>\n<p>코드가 번들링 됐을 때, 어떤 코드 라인에서 에러 발생했는지 추적하기 어렵다. </p>\n<p>그래서 JS에서 <a href=\"https://blog.teamtreehouse.com/introduction-source-maps\">source map</a>을 제공한다. 이것은 컴파일된 코드가 원래 소스코드에 매핑된다. 또한, <a href=\"https://webpack.js.org/configuration/devtool/\">다양한 옵션</a>을 가진다.</p>\n<p><a href=\"https://webpack.js.org/configuration/devtool/#development\">웹팩에서 권장하는 개발 환경에 적합한 옵션</a>에서 <code class=\"language-text\">cheap-module-eval-source-map</code>을 사용할거다. </p>\n<p>요거에 대한 장점과 테스트는 webpack-dev-server까지 설치하여 실습하며 알아보자.</p>\n<h2 id=\"webpack-dev-server-이용하기\"><a href=\"#webpack-dev-server-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack-dev-server 이용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D webpack-dev-server</code></pre></div>\n<p>webpack-dev-server는 간단한 web server를 제공하고 live reloading 기능을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    contentBase<span class=\"token punctuation\">:</span> <span class=\"token string\">'./dist'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  devtool<span class=\"token punctuation\">:</span> 'cheap<span class=\"token operator\">-</span>module<span class=\"token operator\">-</span>eval<span class=\"token operator\">-</span>source<span class=\"token operator\">-</span>map\"\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>contentBase는 웹팩 output.path와 동일해야한다. </p>\n<blockquote>\n<p>WDS(webpack-dev-server)는 compile 후에 output 파일을 작성하지 않는다. 대신에, web server 메모리에 bundle 파일을 저장하고 그것을 제공한다. 만약 페이지가 bundle file을 다른 path에서 찾아야한다면, <code class=\"language-text\">publicPath</code> 옵션을 이용하여 경로를 설정해줘야한다.</p>\n</blockquote>\n<p>npm 명령어에 데브서버 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;scripts&quot;: {\n  &quot;start&quot;: &quot;webpack-dev-server&quot;\n}</code></pre></div>\n<p>이제 일부러 error를 내보자. (아무거나 해보자.)</p>\n<p>콘솔 창을 보면 오류난 코드의 라인을으로 매핑되는 것을 확인할 수 있다.</p>\n<p>cheap-module-eval-source-map의 기능을 볼 수 있는데,</p>\n<ul>\n<li>cheap이 붙는 이유는 column mapping은 되지 않기 때문이다</li>\n<li>대신, line number로 매핑된다.</li>\n<li>eval이 붙은 이유는 각 모듈은 <code class=\"language-text\">eval()</code>로 실행되기 때문이다.</li>\n</ul>\n<h2 id=\"hot-moudle-replacement\"><a href=\"#hot-moudle-replacement\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>hot moudle replacement</h2>\n<p>현재 webpack-dev-server는 코드 수정 후 저장하게 되면 전체 페이지를 reload 한다.</p>\n<p>HMR은 웹팩에서 제공하는 가장 유용한 것 중 하나임. 전체 페이지 새로고침 없이 runtime 중에 업데이트되는 모듈이다. (요번 모듈은 production에서 사용하지 않을거임)</p>\n<p>webpack-dev-server와 webpack 내장 기능인 HMR plugin을 이용할거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>l\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    hot<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// index.js</span>\n\n<span class=\"token comment\">//...</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./math.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에 있던 subtract 함수를 module.hot.accept의 2번째 함수로 옮기자.</p>\n<p>그리고 subtract 함수의 연산식을 *,/ 로 바꿔가며 hot module이 제대로 동작하는지 확인하자. hot module 적용하기 전에는 페이지가 새로고침 됐었는데, 이제 새로고침 하지 않고 변경된 코드를 적용한다.</p>\n<p>요고는 react-hot-loader를 통해 더 자세히 동작을 알아보자.</p>\n<blockquote>\n<p>HMR 이용시에 source map이 제대로 동작하지 않는 것을 알 수 있다.\n새로고침을 하면 되는데 이유는.. 다음 <a href=\"https://stackoverflow.com/questions/34723571/webpack-hot-module-replacement-hmr-sourcemaps-not-updated-new-code-not-visib\">링크</a>를 참조하자</p>\n</blockquote>\n<h2 id=\"summary\"><a href=\"#summary\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<ul>\n<li>mode는 development와 production이 있는데 각 상황에 맞게 최적화됨.</li>\n<li>코드 번들링 되고 나서 error 발생하는 code를 찾기 힘든데 sourcemap 을 이용하면 됨</li>\n<li>webpack-dev-server와 Hot module replacement를 통해 개발 생산성 높일 수 있음.</li>\n</ul>","frontmatter":{"title":"","date":null,"lang":null}}}]}},"pageContext":{}}